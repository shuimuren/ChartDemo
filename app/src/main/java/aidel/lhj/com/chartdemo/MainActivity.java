package aidel.lhj.com.chartdemo;import android.support.v4.content.ContextCompat;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.text.TextUtils;import android.util.SparseArray;import com.github.mikephil.charting.components.AxisBase;import com.github.mikephil.charting.components.Legend;import com.github.mikephil.charting.components.LimitLine;import com.github.mikephil.charting.components.XAxis;import com.github.mikephil.charting.components.YAxis;import com.github.mikephil.charting.data.BarData;import com.github.mikephil.charting.data.BarDataSet;import com.github.mikephil.charting.data.BarEntry;import com.github.mikephil.charting.data.CombinedData;import com.github.mikephil.charting.data.DataSet;import com.github.mikephil.charting.data.Entry;import com.github.mikephil.charting.data.LineData;import com.github.mikephil.charting.data.LineDataSet;import com.github.mikephil.charting.formatter.IAxisValueFormatter;import com.github.mikephil.charting.interfaces.datasets.IBarDataSet;import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;import org.json.JSONException;import org.json.JSONObject;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.List;import aidel.lhj.com.chartdemo.bean.DataParse;import aidel.lhj.com.chartdemo.bean.MinutesBean;import aidel.lhj.com.chartdemo.combine.MyCombinedChartX;import aidel.lhj.com.chartdemo.common.ConstantTest;import aidel.lhj.com.chartdemo.mychart.MyXAxis;import aidel.lhj.com.chartdemo.mychart.MyYAxis;public class MainActivity extends AppCompatActivity {    protected MyCombinedChartX mChartPrice;    private MyCombinedChartX mChartVolume;    protected SparseArray<String> stringSparseArray;    protected DataParse mData;        protected MyXAxis xAxisPrice;    protected MyYAxis axisRightPrice;    protected MyYAxis axisLeftPrice;    protected MyXAxis xAxisVolume;    protected MyYAxis axisRightVolume;    protected MyYAxis axisLeftVolume;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        stringSparseArray = setXLabels();        initView();        getOffLineData();        initChartPrice();        initChartVolume();        setShowLabels(stringSparseArray);        initChartPriceData(mChartPrice);        initChartVolumeData(mChartVolume);    }    private void initChartVolumeData(MyCombinedChartX combinedChartX) {        combinedChartX.getAxisLeft().setAxisMaxValue(mData.getVolmax()); /*单位*/        combinedChartX.getAxisRight().setAxisMaxValue(mData.getVolmax());        ArrayList<BarEntry> lineJJEntries = new ArrayList<>();        for (int i = 0, j = 0; i < mData.getDatas().size(); i++, j++) {            MinutesBean t = mData.getDatas().get(j);            if (t == null) {                lineJJEntries.add(new BarEntry(Float.NaN, i));                continue;            }            if (!TextUtils.isEmpty(stringSparseArray.get(i)) &&                    stringSparseArray.get(i).contains("/")) {                i++;            }            lineJJEntries.add(new BarEntry(i, t.cjnum));        }        CombinedData combinedData = new CombinedData();        BarData barData = generateMultiBarData(                generateBarDataSet(lineJJEntries, 2, "averageChart"));        combinedData.setData(barData);        combinedChartX.setData(combinedData);//当前屏幕会显示所有的数据        combinedChartX.setVisibleXRangeMinimum(242);    }    private void initChartVolume() {        mChartVolume.setScaleEnabled(false);//启用图表缩放事件        mChartVolume.setDrawBorders(true);//是否绘制边线        mChartVolume.setBorderWidth(1);//边线宽度，单位dp        mChartVolume.setDragEnabled(true);//启用图表拖拽事件        mChartVolume.setScaleYEnabled(false);//启用Y轴上的缩放        mChartVolume.setBorderColor(getResources().getColor(R.color.border_color));//边线颜色        mChartVolume.getDescription().setEnabled(false);//右下角对图表的描述信息        mChartVolume.setHardwareAccelerationEnabled(true);//是否开启硬件加速        mChartVolume.setMinOffset(0f);//设置上下内边距        mChartVolume.setExtraOffsets(0f, 0f, 0f, 0f);//图标周围格额外的偏移量        Legend lineChartLegend = mChartVolume.getLegend();        lineChartLegend.setEnabled(false);//是否绘制 Legend 图例        //x轴        xAxisVolume = mChartVolume.getXAxis();        xAxisVolume.setEnabled(false);//是否绘制X轴的数据//        xAxisVolume.setDrawLabels(false);//        xAxisVolume.setDrawAxisLine(false);//        xAxisVolume.setDrawGridLines(false);//        xAxisVolume.enableGridDashedLine(10f, 10f, 0f);//绘制成虚线，只有在关闭硬件加速的情况下才能使用        //左边y        axisLeftVolume = mChartVolume.getAxisLeft();        axisLeftVolume.setAxisMinValue(0);//设置Y轴坐标最小为多少    //    axisLeftVolume.setShowOnlyMinMax(true);//参考上面        axisLeftVolume.setDrawLabels(false);//参考上面        axisLeftVolume.setDrawGridLines(false);//参考上面        /*轴不显示 避免和border冲突*/        axisLeftVolume.setDrawAxisLine(false);//参考上面        //右边y        axisRightVolume = mChartVolume.getAxisRight();        axisRightVolume.setAxisMinValue(0);//参考上面   //     axisRightVolume.setShowOnlyMinMax(true);//参考上面        axisRightVolume.setPosition(YAxis.YAxisLabelPosition.INSIDE_CHART);//参考上面        axisRightVolume.setDrawLabels(true);//参考上面        axisRightVolume.setDrawGridLines(true);//参考上面        axisRightVolume.enableGridDashedLine(10f, 10f, 0f);//参考上面        axisRightVolume.setDrawAxisLine(false);//参考上面        //y轴样式        this.axisRightVolume.setValueFormatter(new IAxisValueFormatter() {            @Override            public String getFormattedValue(float value, AxisBase axis) {                DecimalFormat mFormat = new DecimalFormat("#0.00");                return mFormat.format(value);            }        });    }    private void initChartPriceData(MyCombinedChartX combinedChartX){        combinedChartX.getAxisLeft().setAxisMinimum(mData.getMin());        combinedChartX.getAxisLeft().setAxisMaximum(mData.getMax());        combinedChartX.getAxisRight().setAxisMinimum(mData.getPercentMin());        combinedChartX.getAxisRight().setAxisMaximum(mData.getPercentMax());        LimitLine ll = new LimitLine(0);        ll.setLineWidth(1f);        ll.setLineColor(getResources().getColor(R.color.minute_jizhun));        ll.enableDashedLine(10f, 10f, 0f);        ll.setLineWidth(1);        combinedChartX.getAxisRight().addLimitLine(ll);        combinedChartX.getAxisRight().setBaseValue(0);        ArrayList<Entry> lineCJEntries = new ArrayList<>();        ArrayList<Entry> lineJJEntries = new ArrayList<>();        for (int i = 0, j = 0; i < mData.getDatas().size(); i++, j++) {            MinutesBean t = mData.getDatas().get(j);            if (t == null) {                lineCJEntries.add(new Entry(Float.NaN, i));                lineJJEntries.add(new Entry(Float.NaN, i));                continue;            }            if (!TextUtils.isEmpty(stringSparseArray.get(i)) &&                    stringSparseArray.get(i).contains("/")) {                i++;            }            lineCJEntries.add(new Entry(i, t.cjprice));            lineJJEntries.add(new Entry(i, t.avprice));          //  generateXAxisLabel(i, t);        }        CombinedData combinedData = new CombinedData();        LineData lineData = generateMultiLineData(                generateLineDataSet(lineCJEntries, 1, "oneMinuteChart"),                generateLineDataSet(lineJJEntries, 2, "averageChart"));        combinedData.setData(lineData);        combinedChartX.setData(combinedData);//当前屏幕会显示所有的数据       combinedChartX.setVisibleXRangeMinimum(242);    }    private LineDataSet generateLineDataSet(List<Entry> entries, int color, String label) {        LineDataSet set = new LineDataSet(entries, label);        if(color== 1){            set.setColor(getResources().getColor(R.color.minute_blue));        }else{            set.setColor(getResources().getColor(R.color.minute_yellow));        }        set.setLineWidth(1f);        set.setDrawCircles(false);        set.setDrawCircleHole(false);        set.setDrawValues(true);        set.setAxisDependency(YAxis.AxisDependency.LEFT);        return set;    }    private BarDataSet generateBarDataSet(List<BarEntry> entries, int color, String label) {        BarDataSet set = new BarDataSet(entries, label);//        if(color== 1){//            set.setColor(getResources().getColor(R.color.minute_blue));//        }else{//            set.setColor(getResources().getColor(R.color.minute_yellow));//        }//        set.setLineWidth(1f);//        set.setDrawCircles(false);//        set.setDrawCircleHole(false);        set.setDrawValues(true); //       set.setAxisDependency(YAxis.AxisDependency.LEFT);        return set;    }    private LineData generateMultiLineData(LineDataSet... lineDataSets) {        List<ILineDataSet> dataSets = new ArrayList<>();        for (int i = 0; i < lineDataSets.length; i++) {            dataSets.add(lineDataSets[i]);        }        LineData lineData = new LineData(dataSets);        lineData.setDrawValues(true);        return lineData;    }    private BarData generateMultiBarData(BarDataSet... barDataSets) {        List<IBarDataSet> dataSets = new ArrayList<>();        for (int i = 0; i < barDataSets.length; i++) {            dataSets.add(barDataSets[i]);        }        BarData lineData = new BarData(dataSets);        lineData.setDrawValues(true);        return lineData;    }    private LineDataSet setLine(int type, ArrayList<Entry> lineEntries) {        LineDataSet lineDataSetMa = new LineDataSet(lineEntries, "ma" + type);        lineDataSetMa.setHighlightEnabled(false);        lineDataSetMa.setDrawValues(false);        if (type == 0) {//            lineDataSetMa.setDrawFilled(true);            lineDataSetMa.setAxisDependency(YAxis.AxisDependency.LEFT);            lineDataSetMa.setColor(getResources().getColor(R.color.minute_blue));        } else if (type == 1) {            lineDataSetMa.setAxisDependency(YAxis.AxisDependency.RIGHT);            lineDataSetMa.setColor(getResources().getColor(R.color.minute_yellow));        } else {            lineDataSetMa.setAxisDependency(YAxis.AxisDependency.RIGHT);            lineDataSetMa.setColor(getResources().getColor(R.color.transparent));        }        lineDataSetMa.setAxisDependency(YAxis.AxisDependency.LEFT);        lineDataSetMa.setLineWidth(1f);        lineDataSetMa.setDrawCircles(false);        lineDataSetMa.setAxisDependency(YAxis.AxisDependency.LEFT);        return lineDataSetMa;    }    private void setShowLabels(SparseArray<String> stringSparseArray) {        xAxisPrice.setXLabels(stringSparseArray);    }    private void initChartPrice() {        mChartPrice.setScaleEnabled(false);//启用图表缩放事件        mChartPrice.setDrawBorders(true);//是否绘制边线        mChartPrice.setBorderWidth(1);//边线宽度，单位dp        mChartPrice.setDragEnabled(true);//启用图表拖拽事件        mChartPrice.setScaleYEnabled(false);//启用Y轴上的缩放        mChartPrice.setBorderColor(getResources().getColor(R.color.border_color));//边线颜色        mChartPrice.getDescription().setEnabled(false);//右下角对图表的描述信息        mChartPrice.setHardwareAccelerationEnabled(true);//是否不开启硬件加速        mChartPrice.setMinOffset(0f);//设置上下内边距        mChartPrice.setExtraOffsets(0f, 0f, 0f, 3f);        mChartPrice.setMaxVisibleValueCount(5);        Legend lineChartLegend = mChartPrice.getLegend();//主要控制左下方的图例的        lineChartLegend.setEnabled(false);//是否绘制 Legend 图例        xAxisPrice = mChartPrice.getXAxis();//控制X轴的        xAxisPrice.setDrawLabels(true);//是否显示X坐标轴上的刻度，默认是true        xAxisPrice.setDrawAxisLine(false);//是否绘制坐标轴的线，即含有坐标的那条线，默认是true        xAxisPrice.setDrawGridLines(false);//是否显示X坐标轴上的刻度竖线，默认是true        xAxisPrice.setPosition(XAxis.XAxisPosition.BOTTOM);//把坐标轴放在上下 参数有：TOP, BOTTOM, BOTH_SIDED, TOP_INSIDE or BOTTOM_INSIDE.        xAxisPrice.enableGridDashedLine(10f, 10f, 0f);//绘制成虚线，只有在关闭硬件加速的情况下才能使用        xAxisPrice.setYOffset(7f);//设置X轴刻度在Y坐标上的偏移        //左边y        axisLeftPrice = mChartPrice.getAxisLeft();        axisLeftPrice.setLabelCount(3, false); //第一个参数是Y轴坐标的个数，第二个参数是 是否不均匀分布，true是不均匀分布        axisLeftPrice.setDrawLabels(true);//是否显示Y坐标轴上的刻度，默认是true        axisLeftPrice.setDrawGridLines(true);//是否显示Y坐标轴上的刻度竖线，默认是true        /*轴不显示 避免和border冲突*/        axisLeftPrice.setDrawAxisLine(true);//是否绘制坐标轴的线，即含有坐标的那条线，默认是true        axisLeftPrice.setPosition(YAxis.YAxisLabelPosition.INSIDE_CHART); //参数是INSIDE_CHART(Y轴坐标在内部) 或 OUTSIDE_CHART(在外部（默认是这个）)//        axisLeftPrice.setStartAtZero(false); //设置Y轴坐标是否从0开始     //   axisLeftPrice.setShowOnlyMinMax(true); //参数如果为true Y轴坐标只显示最大值和最小值    axisLeftPrice.setAxisMinimum(mData.getMin());       axisLeftPrice.setAxisMaximum(mData.getMax());        axisLeftPrice.enableGridDashedLine(10f, 10f, 0f);        axisRightPrice = mChartPrice.getAxisRight();        axisRightPrice.setLabelCount(3, false);//参考上面        axisRightPrice.setDrawLabels(false);//参考上面//        axisRightPrice.setStartAtZero(false);//参考上面        axisRightPrice.setDrawGridLines(false);//参考上面        axisRightPrice.setDrawAxisLine(true);//参考上面        //y轴样式        this.axisLeftPrice.setValueFormatter(new IAxisValueFormatter() {            @Override            public String getFormattedValue(float value, AxisBase axis) {                DecimalFormat mFormat = new DecimalFormat("#0.00");                return mFormat.format(value);            }        });    }    private void initView() {        mChartPrice = findViewById(R.id.chartView);        mChartVolume = findViewById(R.id.chartVolume);    }    private SparseArray<String> setXLabels() {        SparseArray<String> xLabels = new SparseArray<>();        xLabels.put(0, "09:30");        xLabels.put(60, "10:30");        xLabels.put(121, "11:30/13:00");        xLabels.put(182, "14:00");        xLabels.put(241, "15:00");        return xLabels;    }    public void getOffLineData() {        mData = new DataParse();        JSONObject object = null;        try {            object = new JSONObject(ConstantTest.MINUTESURL);        } catch (JSONException e) {            e.printStackTrace();        }        mData.parseMinutes(object);    }}